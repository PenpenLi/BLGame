{
  "code": "export default class EventCenter {\r\n    constructor() {\r\n        this.listeners = {};\r\n        this.listener_name = [];\r\n    }\r\n    static getInstance() {\r\n        if (!this.instance || this.instance == null) {\r\n            this.instance = new EventCenter();\r\n        }\r\n        return this.instance;\r\n    }\r\n    on(name, callback, context) {\r\n        let observers = this.listeners[name];\r\n        if (!observers) {\r\n            this.listeners[name] = [];\r\n        }\r\n        this.listeners[name] = [];\r\n        this.listeners[name].push(new Observer(callback, context));\r\n    }\r\n    removeListener(name, context) {\r\n        let observers = this.listeners[name];\r\n        if (!observers)\r\n            return;\r\n        let length = observers.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let observer = observers[i];\r\n            if (observer.compar(context)) {\r\n                observers.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        if (observers.length == 0) {\r\n            delete this.listeners[name];\r\n        }\r\n    }\r\n    removeAllListener() {\r\n        this.listeners = {};\r\n        console.log(\"event center clean all \", this.listeners);\r\n    }\r\n    removeTypeListener() {\r\n        for (let i = 0; i < this.listener_name.length; i++) {\r\n            delete this.listeners[this.listener_name[i]];\r\n        }\r\n    }\r\n    post(name, ...args) {\r\n        let observers = this.listeners[name];\r\n        if (!observers)\r\n            return;\r\n        let length = observers.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let observer = observers[i];\r\n            observer.notify(...args);\r\n        }\r\n    }\r\n}\r\nEventCenter.instance = null;\r\nexport class Observer {\r\n    constructor(callback, context) {\r\n        this.callback = null;\r\n        this.context = null;\r\n        let self = this;\r\n        self.callback = callback;\r\n        self.context = context;\r\n    }\r\n    notify(...args) {\r\n        let self = this;\r\n        self.callback.call(self.context, ...args);\r\n    }\r\n    compar(context) {\r\n        return context == this.context;\r\n    }\r\n}\r\nexport class EventName {\r\n}\r\nEventName.CoinBox_RefreshCoin = \"CoinBox_RefreshCoin\";\r\n",
  "references": []
}
